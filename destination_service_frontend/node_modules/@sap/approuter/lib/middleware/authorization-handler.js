'use strict';

var serviceUtils = require('../utils/service-utils');

module.exports = function isAuthorized(req) {
  if (!req.internalUrl || req.internalUrl.route.authenticationType === 'none') {
    return true;
  }

  var routeScopes = req.internalUrl.route.scope;
  if (!routeScopes) {
    return true;
  }
  if (!Array.isArray(routeScopes)) {
    routeScopes = routeScopes[req.method] || routeScopes.default || [];
  }
  var oauthScopes = req.session && req.session.user && req.session.user.scopes;
  if (!oauthScopes) {
    return false;
  }

  var isAuthorized = routeScopes.some(function(element) {
    return oauthScopes.indexOf(element) > -1;
  });
  if (!isAuthorized) {
    var userToLog = req.session.user.name;
    var auditlogCredentials = serviceUtils.getServiceCredentials('auditlog');
    var IP = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
    if (!auditlogCredentials) {
      userToLog = '******';
      IP = '******';
    }
    var message = 'User not authorized, source of route: ' + req.internalUrl.route.source + ', IP: ' + IP + ',  required scopes: ' + routeScopes + ', user scopes: ' + oauthScopes;
    req.app.auditLogger.securityMessage(message)
      .by(userToLog)
      .log(function (err) {
        if (err) {
          throw err;
        }
      });
  }

  return isAuthorized;
};
